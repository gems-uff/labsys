"""empty message

Revision ID: bd8b129ed7dd
Revises: 49b16673ebeb
Create Date: 2018-04-03 15:37:59.940086

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'bd8b129ed7dd'
down_revision = '49b16673ebeb'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('addresses', sa.Column(
        'city', sa.String(length=255), nullable=True))
    op.add_column('addresses', sa.Column(
        'country', sa.String(length=255), nullable=True))
    op.add_column('addresses', sa.Column(
        'state', sa.String(length=255), nullable=True))
    op.drop_constraint('addresses_country_id_fkey',
                       'addresses', type_='foreignkey')
    op.drop_constraint('addresses_city_id_fkey',
                       'addresses', type_='foreignkey')
    op.drop_constraint('addresses_state_id_fkey',
                       'addresses', type_='foreignkey')
    op.drop_column('addresses', 'state_id')
    op.drop_column('addresses', 'country_id')
    op.drop_column('addresses', 'city_id')
    op.add_column('admissions', sa.Column(
        'city', sa.String(length=255), nullable=True))
    op.add_column('admissions', sa.Column(
        'state', sa.String(length=255), nullable=True))
    op.drop_constraint('admissions_city_id_fkey',
                       'admissions', type_='foreignkey')
    op.drop_constraint('admissions_state_id_fkey',
                       'admissions', type_='foreignkey')
    op.drop_column('admissions', 'state_id')
    op.drop_column('admissions', 'city_id')
    op.drop_constraint('cities_state_id_fkey', 'cities', type_='foreignkey')
    op.drop_constraint('regions_country_id_fkey',
                       'regions', type_='foreignkey')
    op.drop_table('cities')
    op.drop_table('states')
    op.drop_table('regions')
    op.drop_table('countries')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('countries',
                    sa.Column('id', sa.INTEGER(), nullable=False),
                    sa.Column('name_pt_br', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('abbreviation', sa.VARCHAR(length=2),
                              autoincrement=False, nullable=True),
                    sa.Column('name_en_us', sa.VARCHAR(length=255),
                              autoincrement=False, nullable=True),
                    sa.Column('bacen_code', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('id', name='countries_pkey'),
                    postgresql_ignore_search_path=False
                    )
    op.create_table('regions',
                    sa.Column('id', sa.INTEGER(), nullable=False),
                    sa.Column('country_id', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('name', sa.VARCHAR(length=16),
                              autoincrement=False, nullable=True),
                    sa.Column('region_code', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(
                        ['country_id'], ['countries.id'], name='regions_country_id_fkey'),
                    sa.PrimaryKeyConstraint('id', name='regions_pkey'),
                    postgresql_ignore_search_path=False
                    )
    op.create_table('states',
                    sa.Column('id', sa.INTEGER(), nullable=False),
                    sa.Column('region_id', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('name', sa.VARCHAR(length=64),
                              autoincrement=False, nullable=True),
                    sa.Column('uf_code', sa.VARCHAR(length=2),
                              autoincrement=False, nullable=True),
                    sa.Column('ibge_code', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(
                        ['region_id'], ['regions.id'], name='states_region_id_fkey'),
                    sa.PrimaryKeyConstraint('id', name='states_pkey')
                    )
    op.create_table('cities',
                    sa.Column('id', sa.INTEGER(), nullable=False),
                    sa.Column('state_id', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('ibge_code', sa.INTEGER(),
                              autoincrement=False, nullable=True),
                    sa.Column('name', sa.VARCHAR(length=128),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(
                        ['state_id'], ['states.id'], name='cities_state_id_fkey'),
                    sa.PrimaryKeyConstraint('id', name='cities_pkey')
                    )
    op.add_column('admissions', sa.Column(
        'city_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('admissions', sa.Column(
        'state_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('admissions_state_id_fkey',
                          'admissions', 'states', ['state_id'], ['id'])
    op.create_foreign_key('admissions_city_id_fkey',
                          'admissions', 'cities', ['city_id'], ['id'])
    op.drop_column('admissions', 'state')
    op.drop_column('admissions', 'city')
    op.add_column('addresses', sa.Column(
        'city_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('addresses', sa.Column(
        'country_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('addresses', sa.Column(
        'state_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('addresses_state_id_fkey',
                          'addresses', 'states', ['state_id'], ['id'])
    op.create_foreign_key('addresses_city_id_fkey',
                          'addresses', 'cities', ['city_id'], ['id'])
    op.create_foreign_key('addresses_country_id_fkey',
                          'addresses', 'countries', ['country_id'], ['id'])
    op.drop_column('addresses', 'state')
    op.drop_column('addresses', 'country')
    op.drop_column('addresses', 'city')
    # ### end Alembic commands ###
